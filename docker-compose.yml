version: '3.8'

services:
  # База данных материалов
  postgres-materials:
    image: postgres:16-alpine
    container_name: postgres-materials
    environment:
      POSTGRES_DB: ${POSTGRES_MATERIALS_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_MATERIALS_DB_PORT}:5432"
    volumes:
      - postgres-materials-data:/var/lib/postgresql/data
      - ./sql/init/materials-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_MATERIALS_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # База данных пользователей
  postgres-users:
    image: postgres:16-alpine
    container_name: postgres-users
    environment:
      POSTGRES_DB: ${POSTGRES_USERS_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPORT: 5433
    ports:
      - "${POSTGRES_USERS_DB_PORT}:5433"
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
      - ./sql/init/users-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_USERS_DB} -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Бэкенд
  backend:
    build: ./backend
    container_name: backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-materials:5432/materials_db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_SECOND_DATASOURCE_URL=jdbc:postgresql://postgres-users:5433/users_db
      - SPRING_SECOND_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_SECOND_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SERVER_HOST=${SERVER_HOST}
    expose:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./db_backups:/app/db_backups
    depends_on:
      postgres-materials:
        condition: service_healthy
      postgres-users:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Фронтенд
  frontend:
    build: ./frontend
    container_name: frontend
    expose:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network

  # Nginx прокси
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-materials-data:
  postgres-users-data: 