version: '3.8'

volumes:
  postgres-materials-data:
    driver: local
  postgres-users-data:
    driver: local
  db-backups:
    driver: local

networks:
  app-network:
    driver: bridge

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-container
    restart: always
    environment:
      - APP_HOST=${APP_HOST}
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  postgres-materials:
    image: postgres:15-alpine
    container_name: postgres-materials-container
    restart: always
    environment:
      POSTGRES_DB: ${MATERIALS_DB_NAME}
      POSTGRES_USER: ${MATERIALS_DB_USER}
      POSTGRES_PASSWORD: ${MATERIALS_DB_PASSWORD}
    ports:
      - "${POSTGRES_MATERIALS_PORT}:5432"
    volumes:
      - postgres-materials-data:/var/lib/postgresql/data
      - ./sql/init/materials-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - db-backups:/backups
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MATERIALS_DB_USER} -d ${MATERIALS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-users:
    image: postgres:15-alpine
    container_name: postgres-users-container
    restart: always
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USER}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    ports:
      - "${POSTGRES_USERS_PORT}:5432"
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
      - ./sql/init/users-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - db-backups:/backups
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERS_DB_USER} -d ${USERS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend-container
    restart: always
    environment:
      # Spring Boot настройки
      SPRING_PROFILES_ACTIVE: prod
      SERVER_PORT: ${BACKEND_PORT}
      APP_HOST: ${APP_HOST}
      
      # Настройки базы данных материалов
      SPRING_DATASOURCE_MATERIALS_URL: jdbc:postgresql://postgres-materials:5432/${MATERIALS_DB_NAME}
      SPRING_DATASOURCE_MATERIALS_USERNAME: ${MATERIALS_DB_USER}
      SPRING_DATASOURCE_MATERIALS_PASSWORD: ${MATERIALS_DB_PASSWORD}
      
      # Настройки базы данных пользователей
      SPRING_DATASOURCE_USERS_URL: jdbc:postgresql://postgres-users:5432/${USERS_DB_NAME}
      SPRING_DATASOURCE_USERS_USERNAME: ${USERS_DB_USER}
      SPRING_DATASOURCE_USERS_PASSWORD: ${USERS_DB_PASSWORD}
      
      # JWT настройки
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      
      # CORS настройки
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CORS_MAX_AGE: ${CORS_MAX_AGE}
      
      # Настройки администратора
      APP_ADMIN_USERNAME: ${ADMIN_USERNAME}
      APP_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    expose:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - db-backups:/app/db_backups
    depends_on:
      postgres-materials:
        condition: service_healthy
      postgres-users:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - APP_HOST=${APP_HOST}
    container_name: frontend-container
    restart: always
    environment:
      - REACT_APP_HOST=${APP_HOST}
    expose:
      - "3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
