# Правила проекта NonIsothermicalFlow

## Общие соглашения
- Используем Java 23 для бэкенд-разработки
- Используем TypeScript для фронтенд-разработки
- Все Docker-файлы и конфигурации должны быть оптимизированы для производительности
- Применяем многоэтапную сборку для минимизации размера образов
- Избегаем хранения секретов в коде, используем переменные окружения

## Докеризация бэкенда (Spring Boot)
- Используем Eclipse Temurin (adoptopenjdk) как базовый образ для JDK
- Собираем приложение с помощью Gradle внутри контейнера
- Настройка JVM для контейнеров: `-XX:+UseContainerSupport`
- Экспозим порт 8080 для API

## Докеризация фронтенда (React)
- Используем node:18 для сборки
- Используем nginx:alpine для раздачи статики
- Настраиваем NGINX для проксирования API запросов к бэкенду
- Настраиваем кеширование статических файлов

## Работа с базами данных
- Используем две отдельные базы данных: materials_db и users_db
- Инициализируем базы данных с помощью SQL скриптов в ./sql/init/
- Настраиваем volume для персистентности данных
- Настраиваем резервное копирование баз данных

## Переменные окружения
- Для базы данных материалов: префикс MATERIALS_DB_*
- Для базы данных пользователей: префикс USERS_DB_*
- Для JWT: префикс JWT_*
- Для сервера и общих настроек: SERVER_*

## Порядок запуска контейнеров
1. Базы данных
2. Бэкенд
3. Фронтенд

## Стандартные порты
- Бэкенд API: 8080
- База данных материалов: 5432
- База данных пользователей: 5433
- Фронтенд: 80 (для продакшн)

## Организация кода
- Бэкенд: стандартная структура Spring Boot проекта
- Фронтенд: структура React приложения, созданного с помощью Create React App
- Docker-файлы размещаются в корне каждого компонента

## Заметки по особенностям проекта
- Приложение содержит две отдельные базы данных для разделения данных о материалах и пользователях
- Frontend имеет проксирование API по пути /api/* на port 8080
- Важно правильно настроить CORS для взаимодействия фронтенда с бэкендом 